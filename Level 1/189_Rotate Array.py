



'''
    给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

    示例 1:

    输入: [1,2,3,4,5,6,7] 和 k = 3
    输出: [5,6,7,1,2,3,4]
    解释:
    向右旋转 1 步: [7,1,2,3,4,5,6]
    向右旋转 2 步: [6,7,1,2,3,4,5]
    向右旋转 3 步: [5,6,7,1,2,3,4]
    示例 2:

    输入: [-1,-100,3,99] 和 k = 2
    输出: [3,99,-1,-100]
    解释:
    向右旋转 1 步: [99,-1,-100,3]
    向右旋转 2 步: [3,99,-1,-100]
    说明:

    尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
    要求使用空间复杂度为 O(1) 的原地算法。

'''





class Solution:
    def rotate(self, nums, k):
        """
        Do not return anything, modify nums in-place instead.
        """
        #----------------------------------
        #方法一，采用切片组合的方式
        #nums[len(nums)-k:]  获取列表右边的元素
        #nums[:len(nums)-k]  获取列表左边的元素
        #右边元素与左边相加
        #list[:1] 获取第1个之前的元素，不包括第1个元素
        nums[:] = nums[len(nums) - k:] + nums[:len(nums) - k]


        #------------------------------




if __name__ == "__main__":
    s = Solution()
    r = s.rotate([1,2,3,4,5,6],3)
    print(r)















